[{"C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\index.js":"1","C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\reportWebVitals.js":"2","C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\App.js":"3","C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\components\\structure.jsx":"4","C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\components\\geogebraView.jsx":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"7"},{"size":339,"mtime":1607553118019,"results":"9","hashOfConfig":"7"},{"size":4285,"mtime":1607552127522,"results":"10","hashOfConfig":"7"},{"size":5264,"mtime":1607552721627,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"3kt7t9",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"14"},"C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\index.js",[],["24","25"],"C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\App.js",[],"C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\components\\structure.jsx",[],"C:\\Users\\gerbe\\Documents\\KUK\\frontend\\src\\components\\geogebraView.jsx",["26","27","28","29","30","31"],"import { useEffect, useState } from 'react';\r\nimport { Button, TextField, Paper, FormControl, MenuItem, Select } from '@material-ui/core';\r\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\r\nimport RadioButtonCheckedIcon from '@material-ui/icons/RadioButtonChecked';\r\nimport AdbIcon from '@material-ui/icons/Adb';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\r\nimport GeoGebra from 'react-geogebra';\r\nimport axios from \"axios\";\r\nimport '../App.css';\r\n\r\nexport const GeoGebraView = (props) => {\r\n    const [sessionId, setSessionId] = useState(1);\r\n    const [points, setPoints] = useState([]);\r\n    const [pointCounter, setPointCounter] = useState(0);\r\n    const [pointSize, setPointSize] = useState(0);\r\n    const [calculationAlgorithm, setCalculationAlgorithm] = useState('pdc');\r\n    //const [points, setPoints] = useState(props.points);\r\n    //const [hightlightedPoints, setHighlightedPoints] = useState(props.hightlightedPoints);\r\n    //<GeoGebra height=\"100%\" width=\"100%\" showToolBar />\r\n\r\n    const generatePoints = async () => {\r\n        try {\r\n            const result = await axios.post('http://localhost:8080/generatePoints', pointSize);\r\n            setPoints([]);\r\n            setPoints(result.data.points);\r\n            console.log('points size:' + points.length);\r\n            displayPoints();\r\n        } catch (e) { console.error(e) }\r\n    }\r\n\r\n    const calculateResult = async () => {\r\n        try {\r\n            const result = await axios.post('http://localhost:8080/' + calculationAlgorithm, sessionId);\r\n        } catch (e) { console.error(e) }\r\n    }\r\n\r\n    useEffect(() => {\r\n    }, []);\r\n\r\n    function displayPoints() {\r\n        console.log(\"1\");\r\n        points.map(point => {\r\n            console.log(\"2\");\r\n            placePointOnCanvas(point.posX, point.posY)\r\n        });\r\n    }\r\n\r\n    function placePointOnCanvas(x, y) {\r\n        const canvas = window.canvas;\r\n        var ctx = canvas.getContext(\"2d\");\r\n        console.log(\"draw\");\r\n        ctx.moveTo(x + 150, y + 150);\r\n        ctx.lineTo(10, 10);\r\n        ctx.stroke();\r\n    }\r\n\r\n    return (\r\n        <div id=\"geogebra-view\">\r\n            <h2 id=\"secondary-effect\">Hier selbst test!</h2>\r\n            <div id=\"geogebra-manual\">\r\n                <p>\r\n                    Bei dieser kleinen Demo gibt es die Möglichkeit diese 2 Algorithmen selbst auszuprobieren.\r\n                    Auf dem roten Menü unten muss zuerst die gewünschte Anzahl Punkte angegeben werden. Anschliessend kann\r\n                    aus dem Dropdown-Menü einer der 2 Algorithem ausgewählt werden.\r\n                </p>\r\n            </div>\r\n\r\n            <div id=\"geogebra-content\">\r\n\r\n                <div id=\"geogebra-interface\">\r\n                    <canvas id=\"canvas\"></canvas>\r\n                </div>\r\n\r\n                <div id=\"geogebra-menu\">\r\n                    <div id=\"menu-background\"></div>\r\n                    <Paper className=\"menu-element\">\r\n                        <div>\r\n                            <h3 id=\"controller-title\">\r\n                                <span><SportsEsportsIcon /></span>\r\n                                <span>Algorithmus</span>\r\n                                <span>Kontroller</span>\r\n                            </h3>\r\n                        </div>\r\n                    </Paper>\r\n                    <Paper className=\"menu-element\">\r\n                        <div>\r\n                            <p className=\"menu-subtitle\"><RadioButtonCheckedIcon /><span>Punkte setzen</span></p>\r\n                            <form id=\"form-1-points\" className=\"menu-form\" onSubmit={(e) => e.preventDefault()}>\r\n                                <TextField variant=\"outlined\" type=\"number\" label=\"Anzahl Punkte\" min=\"0\" max=\"100\" value={pointSize} onChange={(e) => setPointSize(e.target.value)} />\r\n                                <Button type=\"submit\" variant=\"contained\" color=\"secondary\" onClick={() => generatePoints()}><AddIcon /> Generieren</Button>\r\n                            </form>\r\n                        </div>\r\n                    </Paper>\r\n                    <Paper className=\"menu-element\">\r\n                        <div>\r\n                            <p className=\"menu-subtitle\"><AdbIcon /><span>Algorithmus wählen</span></p>\r\n                            <form id=\"form-2-algorithm\" className=\"menu-form\" onSubmit={(e) => e.preventDefault()}>\r\n                                <FormControl variant=\"outlined\" id=\"form-2-algorithm-select\">\r\n                                    <Select value={calculationAlgorithm} onChange={(e) => { setCalculationAlgorithm(e.target.value) }}>\r\n                                        <MenuItem id=\"algo-sec-1\" value={'pdc'}>13 Punkte</MenuItem>\r\n                                        <MenuItem id=\"algo-sec-2\" value={'sdc'}>Sequentiell</MenuItem>\r\n                                    </Select>\r\n                                </FormControl>\r\n                            </form>\r\n                        </div>\r\n                    </Paper>\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => calculateResult()}><DoneAllIcon />Berechnen</Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}",{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","severity":1,"message":"37","line":8,"column":8,"nodeType":"38","messageId":"39","endLine":8,"endColumn":16},{"ruleId":"36","severity":1,"message":"40","line":13,"column":23,"nodeType":"38","messageId":"39","endLine":13,"endColumn":35},{"ruleId":"36","severity":1,"message":"41","line":15,"column":12,"nodeType":"38","messageId":"39","endLine":15,"endColumn":24},{"ruleId":"36","severity":1,"message":"42","line":15,"column":26,"nodeType":"38","messageId":"39","endLine":15,"endColumn":41},{"ruleId":"36","severity":1,"message":"43","line":34,"column":19,"nodeType":"38","messageId":"39","endLine":34,"endColumn":25},{"ruleId":"44","severity":1,"message":"45","line":43,"column":26,"nodeType":"46","messageId":"47","endLine":43,"endColumn":28},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'GeoGebra' is defined but never used.","Identifier","unusedVar","'setSessionId' is assigned a value but never used.","'pointCounter' is assigned a value but never used.","'setPointCounter' is assigned a value but never used.","'result' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-global-assign","no-unsafe-negation"]